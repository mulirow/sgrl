// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Perfil {
  USUARIO
  GESTOR
  ADMIN
}

enum StatusRecurso {
  DISPONIVEL
  MANUTENCAO
  QUEBRADO
}

enum StatusReserva {
  PENDENTE
  APROVADA
  REJEITADA
  CANCELADA
  CONCLUIDA
  EM_USO
}


model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  name               String?       @map("nome")
  email              String        @unique
  emailVerified      DateTime?     @map("email_verificado")
  image              String?
  password           String?       @map("senha")

  perfil             Perfil        @default(USUARIO)
  ativo              Boolean       @default(true)
  criadoEm           DateTime      @default(now()) @map("criado_em")
  updatedAt          DateTime      @updatedAt @map("atualizado_em")

  laboratorioMembroIds  String[]      @db.ObjectId @map("laboratorio_membro_ids")
  laboratorioGerenteIds String[]      @db.ObjectId @map("laboratorio_gerente_ids")

  laboratoriosMembro    Laboratorio[] @relation("MembrosLaboratorio", fields: [laboratorioMembroIds], references: [id])
  laboratoriosGerente   Laboratorio[] @relation("GerentesLaboratorio", fields: [laboratorioGerenteIds], references: [id])

  reservas           Reserva[]
  notificacoes       Notificacao[]

  accounts           Account[]
  sessions           Session[]

  @@map("usuarios")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId // Foreign key to User
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String // db.String for potentially very long tokens
  access_token      String? @db.String // db.String for potentially very long tokens
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String // db.String for potentially very long tokens
  session_state     String?

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Laboratorio {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  nome             String   @unique
  descricao        String
  centroAcademico  String   @map("centro_academico")
  criadoEm         DateTime @default(now()) @map("criado_em")
  atualizadoEm     DateTime @updatedAt @map("atualizado_em")

  membroIds        String[]  @db.ObjectId @map("membros_ids")
  gerenteIds       String[]  @db.ObjectId @map("gerentes_ids")

  membros          User[] @relation("MembrosLaboratorio", fields: [membroIds], references: [id])
  gerentes         User[] @relation("GerentesLaboratorio", fields: [gerenteIds], references: [id])

  recursos         Recurso[]

  @@map("laboratorios")
}

model Recurso {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  nome            String
  tipo            String
  descricao       String
  localizacao     String
  regrasReserva   Json          @map("regras_reserva")
  status          StatusRecurso @default(DISPONIVEL)

  laboratorioId   String        @db.ObjectId @map("id_laboratorio")
  laboratorio     Laboratorio   @relation(fields: [laboratorioId], references: [id])

  criadoEm        DateTime      @default(now()) @map("criado_em")
  atualizadoEm    DateTime      @updatedAt @map("atualizado_em")

  // Relacionamentos
  reservas        Reserva[]
  bloqueios       Bloqueio[]

  @@map("recursos")
}

model Reserva {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  inicio        DateTime
  fim           DateTime
  status        StatusReserva @default(PENDENTE)
  justificativa String?

  usuarioId     String        @db.ObjectId @map("id_usuario")
  usuario       User       @relation(fields: [usuarioId], references: [id])

  recursoId     String        @db.ObjectId @map("id_recurso")
  recurso       Recurso       @relation(fields: [recursoId], references: [id])

  criadoEm      DateTime      @default(now()) @map("criado_em")
  atualizadoEm  DateTime      @updatedAt @map("atualizado_em")

  @@map("reservas")
}

model Notificacao {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tipo      String
  conteudo  String
  lida      Boolean  @default(false)
  dataEnvio DateTime @default(now()) @map("data_envio")

  usuarioId String   @db.ObjectId @map("id_usuario")
  usuario   User  @relation(fields: [usuarioId], references: [id])

  @@map("notificacoes")
}

model Bloqueio {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  inicio    DateTime
  fim       DateTime
  motivo    String

  recursoId String   @db.ObjectId @map("id_recurso")
  recurso   Recurso  @relation(fields: [recursoId], references: [id])

  criadoEm  DateTime @default(now()) @map("criado_em")

  @@map("bloqueios")
}